#include <stdio.h>
#include <math.h>

#define MAX 10

int gcd(int a, int b) {
    return b == 0 ? a : gcd(b, a % b);
}

int lcm(int a, int b) {
    return (a * b) / gcd(a, b);
}

int find_hyperperiod(int arr[], int n) {
    int result = arr[0];
    for (int i = 1; i < n; i++) {
        result = lcm(result, arr[i]);
    }
    return result;
}

int main() {
    int n;
    int burst[MAX], deadline_rel[MAX], period[MAX];
    int remain[MAX], deadline_abs[MAX];
    int i;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    printf("Enter the CPU burst times:\n");
    for (i = 0; i < n; i++) {
        scanf("%d", &burst[i]);
    }

    printf("Enter the deadlines:\n");
    for (i = 0; i < n; i++) {
        scanf("%d", &deadline_rel[i]);
    }

    printf("Enter the time periods:\n");
    for (i = 0; i < n; i++) {
        scanf("%d", &period[i]);
    }

    int hyper = find_hyperperiod(period, n);

    printf("\nEarliest Deadline Scheduling:\n");
    printf("PID\tBurst\tDeadline\n");
    for (i = 0; i < n; i++) {
        printf("%d\t%d\t%d\n", i + 1, burst[i], deadline_rel[i]);
    }

    printf("\nScheduling occurs for %d ms\n\n", hyper);

    
    for (i = 0; i < n; i++) {
        remain[i] = 0;
        deadline_abs[i] = deadline_rel[i]; // First instance
    }

    for (int time = 0; time < hyper; time++) {
    
        for (i = 0; i < n; i++) {
            if (time % period[i] == 0) {
                remain[i] = burst[i];
                deadline_abs[i] = time + deadline_rel[i];
            }
        }

       
        int task = -1;
        int min_deadline = 99999;

        for (i = 0; i < n; i++) {
            if (remain[i] > 0 && deadline_abs[i] < min_deadline) {
                min_deadline = deadline_abs[i];
                task = i;
            }
        }

        if (task != -1) {
            printf("%dms: Task %d is running.\n", time, task + 1);
            remain[task]--;
        } else {
            printf("%dms: CPU is idle.\n", time);
        }
    }

    return 0;
}
OUTPUT
Enter the number of processes: 3
Enter the CPU burst times:
2 3 4
Enter the deadlines:
1 2 3
Enter the time periods:
1 2 3

Earliest Deadline Scheduling:
PID     Burst   Deadline
1       2       1
2       3       2
3       4       3

Scheduling occurs for 6 ms

0ms: Task 1 is running.
1ms: Task 1 is running.
2ms: Task 1 is running.
3ms: Task 1 is running.
4ms: Task 1 is running.
5ms: Task 1 is running.
