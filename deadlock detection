#include <stdio.h>
#include <stdbool.h>

#define MAX_PROCESSES 10
#define MAX_RESOURCES 10

int main() {
    int n, m;
    int Allocation[MAX_PROCESSES][MAX_RESOURCES];
    int Request[MAX_PROCESSES][MAX_RESOURCES];
    int Available[MAX_RESOURCES];
    int Work[MAX_RESOURCES];
    bool Finish[MAX_PROCESSES];
    int safeSequence[MAX_PROCESSES];
    int count = 0;

  
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    printf("Enter the number of resources: ");
    scanf("%d", &m);

    printf("Enter the Allocation Matrix:\n");
    for (int i = 0; i < n; i++) {
        printf("Process %d: ", i);
        for (int j = 0; j < m; j++) {
            scanf("%d", &Allocation[i][j]);
        }
    }

    printf("Enter the Request Matrix:\n");
    for (int i = 0; i < n; i++) {
        printf("Process %d: ", i);
        for (int j = 0; j < m; j++) {
            scanf("%d", &Request[i][j]);
        }
    }

    printf("Enter the Available Resources: ");
    for (int i = 0; i < m; i++) {
        scanf("%d", &Available[i]);
        Work[i] = Available[i];
    }

    // Initialize Finish array
    for (int i = 0; i < n; i++) {
        Finish[i] = false;
    }

    
    bool progress;
    do {
        progress = false;
        for (int i = 0; i < n; i++) {
            if (!Finish[i]) {
                bool canProceed = true;
                for (int j = 0; j < m; j++) {
                    if (Request[i][j] > Work[j]) {
                        canProceed = false;
                        break;
                    }
                }
                if (canProceed) {
                    for (int j = 0; j < m; j++) {
                        Work[j] += Allocation[i][j];
                    }
                    Finish[i] = true;
                    safeSequence[count++] = i;
                    progress = true;
                }
            }
        }
    } while (progress);

    // Output
    if (count == n) {
        printf("\nSystem is in a safe state.\n");
        printf("Safe Sequence is: ");
        for (int i = 0; i < n; i++) {
            printf("P%d ", safeSequence[i]);
        }
        printf("\n");
    } else {
        printf("\nSystem is NOT in a safe state (deadlock detected).\n");
        for (int i = 0; i < n; i++) {
            if (!Finish[i]) {
                printf("Process P%d is in deadlock.\n", i);
            }
        }
    }

    return 0;
}
Enter the number of processes: 5
Enter the number of resources: 3
Enter the Allocation Matrix:
Process 0: 0 1 0
Process 1: 2 0 0
Process 2: 3 0 3
Process 3: 2 1 1
Process 4: 0 0 2
Enter the Request Matrix:
Process 0: 0 0 0
Process 1: 2 0 2
Process 2: 0 0 0
Process 3: 1 0 0
Process 4: 0 0 2
Enter the Available Resources: 0 0 0

System is in a safe state.
Safe Sequence is: P0 P2 P3 P4 P1
