#include <stdio.h>

void scheduleProcesses(int n, int at[], int bt[], int priority[], int tq) {
    int remaining_bt[n], ct[n], tat[n], wt[n], queue[n], queue_low[n];
    int front = 0, rear = 0, front_low = 0, rear_low = 0, completed = 0, current_time = 0, visited[n];
    float total_wt = 0, total_tat = 0;


    for (int i = 0; i < n; i++) {
        remaining_bt[i] = bt[i];
        visited[i] = 0;
        ct[i] = 0;
    }

    while (completed < n) {
        int executed = 0;

        for (int i = 0; i < n; i++) {
            if (at[i] <= current_time && !visited[i] && priority[i] == 1) {
                queue[rear++] = i;
                visited[i] = 1;
            }
        }

       
        if (front < rear) {
            int i = queue[front++]; 

            if (remaining_bt[i] > tq) {
                current_time += tq;
                remaining_bt[i] -= tq;
                queue[rear++] = i; 
            } else {
                current_time += remaining_bt[i];
                remaining_bt[i] = 0;
                ct[i] = current_time;
                tat[i] = ct[i] - at[i];
                wt[i] = tat[i] - bt[i];
                total_wt += wt[i];
                total_tat += tat[i];
                completed++;
            }
            executed = 1;
        } else {
           
            for (int i = 0; i < n; i++) {
                if (at[i] <= current_time && !visited[i] && priority[i] == 2) {
                    queue_low[rear_low++] = i;
                    visited[i] = 1;
                }
            }

            
            if (front_low < rear_low) {
                int i = queue_low[front_low++];
                current_time += remaining_bt[i];
                remaining_bt[i] = 0;
                ct[i] = current_time;
                tat[i] = ct[i] - at[i];
                wt[i] = tat[i] - bt[i];
                total_wt += wt[i];
                total_tat += tat[i];
                completed++;
                executed = 1;
            }
        }

       
        if (!executed) {
            current_time++;
        }
    }

    printf("\nScheduling Results:\n");
    printf("Process\tAT\tBT\tPriority\tCT\tTAT\tWT\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\t\t%d\t%d\t%d\n", i + 1, at[i], bt[i], priority[i], ct[i], tat[i], wt[i]);
    }

    printf("\nAverage Waiting Time: %.2f\n", total_wt / n);
    printf("Average Turnaround Time: %.2f\n", total_tat / n);
}

int main() {
    int n, tq;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    int at[n], bt[n], priority[n];

    for (int i = 0; i < n; i++) {
        printf("Enter arrival time, burst time, and priority (1=High, 2=Low) for process %d: ", i + 1);
        scanf("%d %d %d", &at[i], &bt[i], &priority[i]);
    }

    printf("Enter time quantum for Round Robin: ");
    scanf("%d", &tq);

    scheduleProcesses(n, at, bt, priority, tq);

    return 0;
}
Enter the number of processes: 4
Enter arrival time, burst time, and priority (1=High, 2=Low) for process 1: 0 5 1
Enter arrival time, burst time, and priority (1=High, 2=Low) for process 2: 1 3 2
Enter arrival time, burst time, and priority (1=High, 2=Low) for process 3: 2 8 1
Enter arrival time, burst time, and priority (1=High, 2=Low) for process 4: 3 6 2
Enter time quantum for Round Robin: 2

Scheduling Results:
Process AT      BT      Priority        CT      TAT     WT
1       0       5       1               7       7       2
2       1       3       2               16      15      12
3       2       8       1               13      11      3
4       3       6       2               22      19      13

Average Waiting Time: 7.50
Average Turnaround Time: 13.00
