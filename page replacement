#include <stdio.h>

#define MAX 100

int search(int key, int frame[], int size) {
    for (int i = 0; i < size; i++)
        if (frame[i] == key)
            return 1;
    return 0;
}

int findLRU(int time[], int n) {
    int minimum = time[0], pos = 0;
    for (int i = 1; i < n; i++) {
        if (time[i] < minimum) {
            minimum = time[i];
            pos = i;
        }
    }
    return pos;
}

void FIFO(int pages[], int n, int frames) {
    int frame[MAX], front = 0, count = 0, pageFaults = 0;

    printf("FIFO Page Replacement Process:\n");
    for (int i = 0; i < frames; i++) frame[i] = -1;

    for (int i = 0; i < n; i++) {
        if (!search(pages[i], frame, frames)) {
            frame[front] = pages[i];
            front = (front + 1) % frames;
            pageFaults++;
        }

        printf("PF No. %d: ", i + 1);
        for (int j = 0; j < frames; j++) {
            if (frame[j] != -1)
                printf("%d ", frame[j]);
            else
                printf("- ");
        }
        printf("\n");
    }
    printf("FIFO Page Faults: %d\n\n", pageFaults);
}

void LRU(int pages[], int n, int frames) {
    int frame[MAX], time[MAX], counter = 0, pageFaults = 0;

    printf("LRU Page Replacement Process:\n");
    for (int i = 0; i < frames; i++) frame[i] = -1;

    for (int i = 0; i < n; i++) {
        int flag1 = 0;
        for (int j = 0; j < frames; j++) {
            if (frame[j] == pages[i]) {
                counter++;
                time[j] = counter;
                flag1 = 1;
                break;
            }
        }

        if (!flag1) {
            int pos = -1;
            for (int j = 0; j < frames; j++) {
                if (frame[j] == -1) {
                    pos = j;
                    break;
                }
            }

            if (pos == -1)
                pos = findLRU(time, frames);

            frame[pos] = pages[i];
            counter++;
            time[pos] = counter;
            pageFaults++;
        }

        printf("PF No. %d: ", i + 1);
        for (int j = 0; j < frames; j++) {
            if (frame[j] != -1)
                printf("%d ", frame[j]);
            else
                printf("- ");
        }
        printf("\n");
    }
    printf("LRU Page Faults: %d\n\n", pageFaults);
}

int predict(int pages[], int frame[], int n, int index, int frames) {
    int res = -1, farthest = index;
    for (int i = 0; i < frames; i++) {
        int j;
        for (j = index; j < n; j++) {
            if (frame[i] == pages[j]) {
                if (j > farthest) {
                    farthest = j;
                    res = i;
                }
                break;
            }
        }
        if (j == n) return i;
    }
    return (res == -1) ? 0 : res;
}

void optimal(int pages[], int n, int frames) {
    int frame[MAX], pageFaults = 0;

    printf("Optimal Page Replacement Process:\n");
    for (int i = 0; i < frames; i++) frame[i] = -1;

    for (int i = 0; i < n; i++) {
        if (!search(pages[i], frame, frames)) {
            int j;
            for (j = 0; j < frames; j++) {
                if (frame[j] == -1) {
                    frame[j] = pages[i];
                    break;
                }
            }

            if (j == frames) {
                int pos = predict(pages, frame, n, i + 1, frames);
                frame[pos] = pages[i];
            }

            pageFaults++;
        }

        printf("PF No. %d: ", i + 1);
        for (int j = 0; j < frames; j++) {
            if (frame[j] != -1)
                printf("%d ", frame[j]);
            else
                printf("- ");
        }
        printf("\n");
    }
    printf("Optimal Page Faults: %d\n", pageFaults);
}

int main() {
    int frames, len, pages[MAX];

    printf("Enter the number of Frames: ");
    scanf("%d", &frames);
    printf("Enter the length of reference string: ");
    scanf("%d", &len);
    printf("Enter the reference string: ");
    for (int i = 0; i < len; i++) {
        scanf("%d", &pages[i]);
    }

    FIFO(pages, len, frames);
    LRU(pages, len, frames);
    optimal(pages, len, frames);

    return 0;
}
Enter the number of Frames: 3
Enter the length of reference string: 6
Enter the reference string: 1 4 2 3 2 1
FIFO Page Replacement Process:
PF No. 1: 1 - -
PF No. 2: 1 4 -
PF No. 3: 1 4 2
PF No. 4: 3 4 2
PF No. 5: 3 4 2
PF No. 6: 3 1 2
FIFO Page Faults: 5

LRU Page Replacement Process:
PF No. 1: 1 - -
PF No. 2: 1 4 -
PF No. 3: 1 4 2
PF No. 4: 3 4 2
PF No. 5: 3 4 2
PF No. 6: 3 1 2
LRU Page Faults: 5

Optimal Page Replacement Process:
PF No. 1: 1 - -
PF No. 2: 1 4 -
PF No. 3: 1 4 2
PF No. 4: 1 3 2
PF No. 5: 1 3 2
PF No. 6: 1 3 2
Optimal Page Faults: 4
