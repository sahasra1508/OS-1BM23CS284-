#include <stdio.h>

#define MAX 10

void firstFit(int blockSize[], int blocks, int fileSize[], int files) {
    int allocation[MAX];
    for (int i = 0; i < files; i++) allocation[i] = -1;

    for (int i = 0; i < files; i++) {
        for (int j = 0; j < blocks; j++) {
            if (blockSize[j] >= fileSize[i]) {
                allocation[i] = j;
                blockSize[j] -= fileSize[i];
                break;
            }
        }
    }

    printf("\nMemory Management Scheme - First Fit\n");
    printf("File_no\tFile_size\tBlock_no\tBlock_size\n");
    for (int i = 0; i < files; i++) {
        printf("%d\t%d\t\t", i + 1, fileSize[i]);
        if (allocation[i] != -1)
            printf("%d\t\t%d\n", allocation[i] + 1, blockSize[allocation[i]]);
        else
            printf("Not Allocated\n");
    }
}

void bestFit(int blockSize[], int blocks, int fileSize[], int files) {
    int allocation[MAX];
    for (int i = 0; i < files; i++) allocation[i] = -1;

    for (int i = 0; i < files; i++) {
        int bestIdx = -1;
        for (int j = 0; j < blocks; j++) {
            if (blockSize[j] >= fileSize[i]) {
                if (bestIdx == -1 || blockSize[j] < blockSize[bestIdx]) {
                    bestIdx = j;
                }
            }
        }

        if (bestIdx != -1) {
            allocation[i] = bestIdx;
            blockSize[bestIdx] -= fileSize[i];
        }
    }

    printf("\nMemory Management Scheme - Best Fit\n");
    printf("File_no\tFile_size\tBlock_no\tBlock_size\n");
    for (int i = 0; i < files; i++) {
        printf("%d\t%d\t\t", i + 1, fileSize[i]);
        if (allocation[i] != -1)
            printf("%d\t\t%d\n", allocation[i] + 1, blockSize[allocation[i]]);
        else
            printf("Not Allocated\n");
    }
}

void worstFit(int blockSize[], int blocks, int fileSize[], int files) {
    int allocation[MAX];
    for (int i = 0; i < files; i++) allocation[i] = -1;

    for (int i = 0; i < files; i++) {
        int worstIdx = -1;
        for (int j = 0; j < blocks; j++) {
            if (blockSize[j] >= fileSize[i]) {
                if (worstIdx == -1 || blockSize[j] > blockSize[worstIdx]) {
                    worstIdx = j;
                }
            }
        }

        if (worstIdx != -1) {
            allocation[i] = worstIdx;
            blockSize[worstIdx] -= fileSize[i];
        }
    }

    printf("\nMemory Management Scheme - Worst Fit\n");
    printf("File_no\tFile_size\tBlock_no\tBlock_size\n");
    for (int i = 0; i < files; i++) {
        printf("%d\t%d\t\t", i + 1, fileSize[i]);
        if (allocation[i] != -1)
            printf("%d\t\t%d\n", allocation[i] + 1, blockSize[allocation[i]]);
        else
            printf("Not Allocated\n");
    }
}

int main() {
    int blockSize[MAX], fileSize[MAX];
    int m, n, choice;

    printf("Memory Management Scheme\n");
    printf("Enter the number of blocks: ");
    scanf("%d", &m);
    printf("Enter the number of files: ");
    scanf("%d", &n);

    printf("Enter the size of the blocks:\n");
    for (int i = 0; i < m; i++) {
        printf("Block %d: ", i + 1);
        scanf("%d", &blockSize[i]);
    }

    printf("Enter the size of the files:\n");
    for (int i = 0; i < n; i++) {
        printf("File %d: ", i + 1);
        scanf("%d", &fileSize[i]);
    }

    do {
        printf("\n1. First Fit\n2. Best Fit\n3. Worst Fit\n4. Exit\nEnter your choice: ");
        scanf("%d", &choice);

        int tempBlocks[MAX];
        for (int i = 0; i < m; i++) tempBlocks[i] = blockSize[i]; // reset block sizes

        switch (choice) {
            case 1: firstFit(tempBlocks, m, fileSize, n); break;
            case 2: bestFit(tempBlocks, m, fileSize, n); break;
            case 3: worstFit(tempBlocks, m, fileSize, n); break;
            case 4: printf("Exiting...\n"); break;
            default: printf("Invalid choice.\n");
        }
    } while (choice != 4);

    return 0;
}
#include <stdio.h>

#define MAX 10

void firstFit(int blockSize[], int blocks, int fileSize[], int files) {
    int allocation[MAX];
    for (int i = 0; i < files; i++) allocation[i] = -1;

    for (int i = 0; i < files; i++) {
        for (int j = 0; j < blocks; j++) {
            if (blockSize[j] >= fileSize[i]) {
                allocation[i] = j;
                blockSize[j] -= fileSize[i];
                break;
            }
        }
    }

    printf("\nMemory Management Scheme - First Fit\n");
    printf("File_no\tFile_size\tBlock_no\tBlock_size\n");
    for (int i = 0; i < files; i++) {
        printf("%d\t%d\t\t", i + 1, fileSize[i]);
        if (allocation[i] != -1)
            printf("%d\t\t%d\n", allocation[i] + 1, blockSize[allocation[i]]);
        else
            printf("Not Allocated\n");
    }
}

void bestFit(int blockSize[], int blocks, int fileSize[], int files) {
    int allocation[MAX];
    for (int i = 0; i < files; i++) allocation[i] = -1;

    for (int i = 0; i < files; i++) {
        int bestIdx = -1;
        for (int j = 0; j < blocks; j++) {
            if (blockSize[j] >= fileSize[i]) {
                if (bestIdx == -1 || blockSize[j] < blockSize[bestIdx]) {
                    bestIdx = j;
                }
            }
        }

        if (bestIdx != -1) {
            allocation[i] = bestIdx;
            blockSize[bestIdx] -= fileSize[i];
        }
    }

    printf("\nMemory Management Scheme - Best Fit\n");
    printf("File_no\tFile_size\tBlock_no\tBlock_size\n");
    for (int i = 0; i < files; i++) {
        printf("%d\t%d\t\t", i + 1, fileSize[i]);
        if (allocation[i] != -1)
            printf("%d\t\t%d\n", allocation[i] + 1, blockSize[allocation[i]]);
        else
            printf("Not Allocated\n");
    }
}

void worstFit(int blockSize[], int blocks, int fileSize[], int files) {
    int allocation[MAX];
    for (int i = 0; i < files; i++) allocation[i] = -1;

    for (int i = 0; i < files; i++) {
        int worstIdx = -1;
        for (int j = 0; j < blocks; j++) {
            if (blockSize[j] >= fileSize[i]) {
                if (worstIdx == -1 || blockSize[j] > blockSize[worstIdx]) {
                    worstIdx = j;
                }
            }
        }

        if (worstIdx != -1) {
            allocation[i] = worstIdx;
            blockSize[worstIdx] -= fileSize[i];
        }
    }

    printf("\nMemory Management Scheme - Worst Fit\n");
    printf("File_no\tFile_size\tBlock_no\tBlock_size\n");
    for (int i = 0; i < files; i++) {
        printf("%d\t%d\t\t", i + 1, fileSize[i]);
        if (allocation[i] != -1)
            printf("%d\t\t%d\n", allocation[i] + 1, blockSize[allocation[i]]);
        else
            printf("Not Allocated\n");
    }
}

int main() {
    int blockSize[MAX], fileSize[MAX];
    int m, n, choice;

    printf("Memory Management Scheme\n");
    printf("Enter the number of blocks: ");
    scanf("%d", &m);
    printf("Enter the number of files: ");
    scanf("%d", &n);

    printf("Enter the size of the blocks:\n");
    for (int i = 0; i < m; i++) {
        printf("Block %d: ", i + 1);
        scanf("%d", &blockSize[i]);
    }

    printf("Enter the size of the files:\n");
    for (int i = 0; i < n; i++) {
        printf("File %d: ", i + 1);
        scanf("%d", &fileSize[i]);
    }

    do {
        printf("\n1. First Fit\n2. Best Fit\n3. Worst Fit\n4. Exit\nEnter your choice: ");
        scanf("%d", &choice);

        int tempBlocks[MAX];
        for (int i = 0; i < m; i++) tempBlocks[i] = blockSize[i]; // reset block sizes

        switch (choice) {
            case 1: firstFit(tempBlocks, m, fileSize, n); break;
            case 2: bestFit(tempBlocks, m, fileSize, n); break;
            case 3: worstFit(tempBlocks, m, fileSize, n); break;
            case 4: printf("Exiting...\n"); break;
            default: printf("Invalid choice.\n");
        }
    } while (choice != 4);

    return 0;
}
Memory Management Scheme
Enter the number of blocks: 2
Enter the number of files: 2
Enter the size of the blocks:
Block 1: 2
Block 2: 3
Enter the size of the files:
File 1: 1
File 2: 2

1. First Fit
2. Best Fit
3. Worst Fit
4. Exit
Enter your choice: 1

Memory Management Scheme - First Fit
File_no File_size       Block_no        Block_size
1       1               1               1
2       2               2               1

1. First Fit
2. Best Fit
3. Worst Fit
4. Exit
Enter your choice: 2

Memory Management Scheme - Best Fit
File_no File_size       Block_no        Block_size
1       1               1               1
2       2               2               1

1. First Fit
2. Best Fit
3. Worst Fit
4. Exit
Enter your choice: 3

Memory Management Scheme - Worst Fit
File_no File_size       Block_no        Block_size
1       1               2               2
2       2               1               0

1. First Fit
2. Best Fit
3. Worst Fit
4. Exit
Enter your choice: 4
Exiting...
